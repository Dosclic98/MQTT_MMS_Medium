# General configurations extended by default by every other configuration
[General]
sim-time-limit = 120s
**.numClients = 4
#General number of apps for every type of node (leave to 1)
**.client[*].numApps = 1
**.wiredClient[*].numApps = 1
**.wirelessClient[*].numApps = 1
**.broker.numApps = 1
**.server*.numApps = 1
**.evilClient.numApps = 1

# Clients Transport Settings
**.client[*].hasTcp = true
**.client[*].hasUdp = false

# Wired Clients Transport Settings
**.wiredClient[*].hasTcp = true
**.wiredClient[*].hasUdp = false

# Wireless Clients Transport Settings
**.wirelessClient[*].hasTcp = true
**.wirelessClient[*].hasUdp = false

# Server Transport Settings
**.server*.hasTcp = true
**.server*.hasUdp = false
**.evilClient.hasTcp = true
**.evilClient.hasUdp = false

# Broket settings
**.broker.app[0].typename = "Broker"
**.broker.app[0].replyDelay = 0ms
**.broker.hasTcp = true
**.broker.hasUdp = false

num-rngs = 40
repeat = 1
check-signals = false
seed-set = ${runnumber}

# MQTT base configuration extended by every other MQTT configuration
[MQTTBase]

# Internet cloud delayer configuration
**.internetCloud.ipv4Delayer.config = xmldoc("internetCloudDelays.xml")

# Number of clients for the MQTT simulation
*.numClients = 3
#Broker Settings
*.broker.app[0].typename = "Broker"
# Broker's service time distribution
*.broker.app[0].serviceTime = intuniform(4ms, 8ms)
**.isDos = true
*.broker.app[0].replyDelay = 0ms

## Clients Settings ##
# Type of client (class wich defines the client's behaviour)
*.client[*].app[0].typename = "MqttClient"
# Clients' service time distribution
*.client[*].app[0].thinkTime = intuniform(47ms, 52ms)
# Client's time gap between sessions (different TCP connections)
*.client[*].app[0].idleInterval = 100s
# Length of the request
*.client[*].app[0].requestLength = 30B
# Length of the reply
*.client[*].app[0].replyLength = 15B
# Maximum number of requests to send for each session 
*.client[*].app[0].numRequestsPerSession = 1000 

## Client CFG ##
# Publisher on topic 1 (command)
*.client[0].app[0].pubTopic = 1
# Subscriber on topic 0 (report)
*.client[0].app[0].subTopic = 0

# Publisher on topic 0 (report)
*.client[1].app[0].pubTopic = 0
# Subscriber on topic 1 (command)
*.client[1].app[0].subTopic = 1

# Publisher on topic 0 (report)
*.client[2].app[0].pubTopic = 0
# Publisher on topic 1 (command)
*.client[2].app[0].subTopic = 1

# MQTT wired configuration on Ethernet cables where all the clients are connected to a 
# switch wich is connected to the rouer, connected itself to the server 
[MQTT_Wired_Standard]
extends = MQTTBase
network = MqttWiredNetworkBase
# Specify that each client must connect to the broker
*.client[*].app[0].connectAddress = "MqttWiredNetworkBase.broker"

# MQTT DoS wired configuration on Ethernet cables where all the clients are connected to a 
# switch wich is connected to the rouer, connected itself to the server 
[MQTT_Wired_DoS]
extends = MQTT_Wired_Standard
*.numClients = 40

## Clients Settings ##
# Type of client (class wich defines the client's behaviour)
*.client[3..].app[0].typename = "BadMqttClient"

# MQTT wireless configuration where clients and server communicate using 
# an Access Point through a WiFi connection
[MQTT_Wireless_Standard]
extends = MQTTBase
network = MqttWirelessNetworkBase
# Specify that each client must connect to the broker
*.client[*].app[0].connectAddress = "MqttWirelessNetworkBase.broker"
# Statically set the position for each client (necessary for the wireless travel time calculations)
*.client[*].mobility.typename = "StationaryMobility"
*.client[*].mobility.initFromDisplayString = false
*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 150m
*.client[1].mobility.initialY = 200m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 200m
*.client[2].mobility.initialY = 250m

*.visualizer.mediumVisualizer.displaySignals = true

# Statically binding client and server to the respective APs
**.clientAP.wlan[*].mgmt.ssid = "cliAP"
**.brokerAP.wlan[*].mgmt.ssid = "broAP"
**.client[*].wlan[*].agent.defaultSsid = "cliAP"
**.broker.wlan[*].agent.defaultSsid = "broAP"

[MQTT_Wireless_DoS]
extends = MQTT_Wireless_Standard
*.numClients = 40

## Clients Settings ##
# Type of client (class wich defines the client's behaviour)
*.client[3..].app[0].typename = "BadMqttClient"

# The position for all the bad MQTT clients is the same for simplicity
*.client[3..].mobility.initialX = 200m
*.client[3..].mobility.initialY = 250m


# MMS Man In The Middle Base configuration extended by every other MMS MITM configuration
[MMS_MITM_Base]

# Internet cloud delayer config
**.internetCloud.ipv4Delayer.config = xmldoc("internetCloudDelays.xml")

## Server Settings ##
**.server[*].app[*].typename = "MmsServer"
**.server[*].app[*].replyDelay = 0ms
**.server[*].app[*].serviceTime = intuniform(2ms, 4ms)
**.server[*].app[*].emitInterval = 4s

# Client Settings
**.client[*].app[*].typename = "MmsClient"
# Time Between MMS requests, this is evaluated for each request
**.client[*].app[*].thinkTime = intuniform(45ms, 70ms)
# Time Between TCP reconnect after a disconnect
**.client[*].app[*].idleInterval = intuniform(5s, 10s)
**.client[*].app[*].requestLength = 30B
**.client[*].app[*].replyLength = 15B
**.client[*].app[*].numRequestsPerSession = 2000
# Setup logging for the firt class
**.client[0].app[*].isLogging = true
**.server[*].app[*].isLogging = true
**.evilClient.app[2].isLogging = true

# WiredClient Settings
**.wiredClient[*].app[*].typename = "MmsClient"
**.wiredClient[*].app[*].thinkTime = intuniform(45ms, 70ms)
**.wiredClient[*].app[*].idleInterval = intuniform(5s, 10s)
**.wiredClient[*].app[*].requestLength = 30B
**.wiredClient[*].app[*].replyLength = 15B
**.wiredClient[*].app[*].numRequestsPerSession = 2000

# WirelessClient Settings
**.wirelessClient[*].app[*].typename = "MmsClient"
**.wirelessClient[*].app[*].thinkTime = intuniform(45ms, 70ms)
**.wirelessClient[*].app[*].idleInterval = intuniform(5s, 10s)
**.wirelessClient[*].app[*].requestLength = 30B
**.wirelessClient[*].app[*].replyLength = 15B
**.wirelessClient[*].app[*].numRequestsPerSession = 2000

# EvilClient Block/Compromise Probability configuration
**.evilClient.app[*].measureBlockProb = 0.15
**.evilClient.app[*].measureCompromisedProb = 0.4
**.evilClient.app[*].readResponseBlockProb = 0.1
**.evilClient.app[*].readResponseCompromisedProb = 0.6
**.evilClient.app[*].commandResponseBlockProb = 0.1
**.evilClient.app[*].commandResponseCompromisedProb = 0.6
**.evilClient.app[*].readRequestBlockProb = 0.2
**.evilClient.app[*].readRequestCompromisedProb = 0.8
**.evilClient.app[*].commandRequestBlockProb = 0.2
**.evilClient.app[*].commandRequestCompromisedProb = 0.8

*.evilClient.mobility.typename = "StationaryMobility"
*.evilClient.mobility.initFromDisplayString = false

# MMS DoS Base configuration extended by every other MMS DoS configuration
[MMS_DoS_Base]

# Internet cloud delayer configuration
**.internetCloud.ipv4Delayer.config = xmldoc("internetCloudDelays.xml")

# Wirwless Server Settings (temporary)
**.server*.app[*].typename = "MmsServer"
**.server*.app[*].replyDelay = 0ms
**.server*.app[*].serviceTime = intuniform(2ms, 4ms)
**.server*.app[*].emitInterval = 4s

# Client Settings (define which clients are good ones and which are bad ones 
# with the respective service time distributions)
**.client[..1].app[*].typename = "MmsClient"
**.client[..1].app[*].thinkTime = intuniform(5s, 8s)
**.client[2..].app[*].typename = "BadMmsClient"
**.client[2..].app[*].thinkTime = intuniform(47ms, 52ms)

# Time Between TCP reconnect after a disconnect
**.client[*].app[*].idleInterval = intuniform(5s, 10s)
**.client[*].app[*].requestLength = 30B
**.client[*].app[*].replyLength = 15B
**.client[*].app[*].numRequestsPerSession = 10000

# If the network has mixed wired and wireless clients, in a DoS configuration the wired clients 
# are the good ones and the wireless clients are the bad ones
# WiredClient Settings (good)
**.wiredClient[*].app[*].typename = "MmsClient"
**.wiredClient[*].app[*].thinkTime = intuniform(5s, 8s)
**.wiredClient[*].app[*].idleInterval = intuniform(5s, 10s)
**.wiredClient[*].app[*].requestLength = 30B
**.wiredClient[*].app[*].replyLength = 15B
**.wiredClient[*].app[*].numRequestsPerSession = 10000

# WirelessClient Settings (bad)
**.wirelessClient[*].app[*].typename = "BadMmsClient"
**.wirelessClient[*].app[*].thinkTime = intuniform(47ms, 52ms)
**.wirelessClient[*].app[*].idleInterval = intuniform(5s, 10s)
**.wirelessClient[*].app[*].requestLength = 30B
**.wirelessClient[*].app[*].replyLength = 15B
**.wirelessClient[*].app[*].numRequestsPerSession = 10000

# It's better to disable all the timeouts
**.client[*].app[*].resTimeoutInterval = 120s  

# MMS MITM Wired configuration with 1 client connected to a switch, the servers and the evil client are
# connected to a router and switch and router are connetcted themselves
[MMS_MITM_Wired]
network = MMSWiredNetworkMITMBase
extends = MMS_MITM_Base
# Temporary disable the timeout for testing purposes (internet cloud)
*.client[*].app[*].resTimeoutInterval = 10s

# Defines the number of clients and the number of servers of the configuration
MMSWiredNetworkMITMBase.numClients = 1 
MMSWiredNetworkMITMBase.numServers = 2

# Sets the applications 0 and 1 used to communicate with the servers
*.evilClient.app[..1].typename = "ClientEvilComp"
# Sets the application 2 to communicate with the clients
*.evilClient.app[2].typename = "ServerEvilComp"

## EvilClient Settings ##
# Sets the reply delay for the ServerEvilComp 
*.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)

# Sets the service time for the ClientEvilComp 
*.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)
# Time Between TCP reconnect after a disconnect (unused)
*.evilClient.app[..1].idleInterval = intuniform(5s, 10s)

**.evilClient.app[2].stateChangeDelay = intuniform(22s,28s)

# Specifies that the app[0] of the evilClient shall connect to the server[1] and the 
# app[1] shall connect to the server[1].
*.evilClient.app[0].connectAddress = "MMSWiredNetworkMITMBase.server[0]"
*.evilClient.app[1].connectAddress = "MMSWiredNetworkMITMBase.server[1]"

# We simulate that the connection with the server 0 is compromised but 
# the connection with the server 1 is direct without the evilClient in between
*.client[*].app[0].connectAddress = "MMSWiredNetworkMITMBase.evilClient"
*.client[*].app[1].connectAddress = "MMSWiredNetworkMITMBase.server[1]"

# Fixed position of the evil client
*.evilClient.mobility.initialX = 350m
*.evilClient.mobility.initialY = 128m

[MMS_MITM_5G]
network = MMS5GNetworkMITMBase
extends = MMS_MITM_Base

# Defines the number of clients and the number of servers of the configuration
MMS5GNetworkMITMBase.numClients = 1 
MMS5GNetworkMITMBase.numServers = 2

# connect the UE's NIC to the corresponding serving eNB
**.server[*].macCellId = 1
**.server[*].masterId = 1
**.server[*].nrMacCellId = 1
**.server[*].nrMasterId = 1

# Set a timeout interval a little higher than default
*.client[*].app[*].resTimeoutInterval = 5s

# Sets the applications 0 and 1 used to communicate with the servers
*.evilClient.app[..1].typename = "ClientEvilComp"
# Sets the application 2 to communicate with the clients
*.evilClient.app[2].typename = "ServerEvilComp"

## EvilClient Settings ##
# Sets the reply delay for the ServerEvilComp 
*.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)

# Sets the service time for the ClientEvilComp 
*.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)
# Time Between TCP reconnect after a disconnect (unused)
*.evilClient.app[..1].idleInterval = intuniform(5s, 10s)

# Specifies that the app[0] of the evilClient shall connect to the server[1] and the 
# app[1] shall connect to the server[1].
*.evilClient.app[0].connectAddress = "MMS5GNetworkMITMBase.server[0]"
*.evilClient.app[1].connectAddress = "MMS5GNetworkMITMBase.server[1]"

# We simulate that the connection with the server 0 is compromised but 
# the connection with the server 1 is direct without the evilClient in between
*.client[*].app[0].connectAddress = "MMS5GNetworkMITMBase.evilClient"
*.client[*].app[1].connectAddress = "MMS5GNetworkMITMBase.server[1]"

# Fixed position of the evil client
*.evilClient.mobility.initialX = 350m
*.evilClient.mobility.initialY = 128m

# MMS DoS Wired configuration with 3 good clients and 3 bad clients connected to a switch, the server is
# connected to a router and switch and router are connetcted themselves
[MMS_DoS_Wired]
network = MMSWiredNetworkDoSBase
extends = MMS_DoS_Base

MMSWiredNetworkDoSBase.numGoodClient = 2
MMSWiredNetworkDoSBase.numBadClient = 3

*.server*.app[*].emitInterval = 4s
# All the clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWiredNetworkDoSBase.server[0]"

# MMS DoS Wired configuration with 3 good clients and 3 bad clients connected to a switch, 4 servers are connected to a router 
# which is connected to the switch
[MMS_DoS_Wired_Multi_Server]
network = MMSWiredNetworkDoSBase
extends = MMS_DoS_Base

# The number of app for each client and the number of servers must be equal
*.client[*].numApps = 2
*.numServers = 2

*.numGoodClient = 2
*.numBadClient = 20

# All the clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWiredNetworkDoSBase.server[0]"
*.client[*].app[1].connectAddress = "MMSWiredNetworkDoSBase.server[1]"

# MMS MITM Wired and Wireless clients are mixed in the network, the Access point 
# is connected to the router as the server and the evil client 
[MMS_MITM_Wired_Wireless]
network = MMSWiredWirelessNetworkMITMBase
extends = MMS_MITM_Base

*.numWiredClients = 2
*.numWirelessClients = 2
*.numServers = 2

#EvilComp Settings
*.evilClient.app[2].typename = "ServerEvilComp"
*.evilClient.app[..1].typename = "ClientEvilComp"
# Server service time, it has to be an integer, it is evaluated for each request
*.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)
*.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)

# Time Between TCP reconnect after a disconnect
*.evilClient.app[0].connectAddress = "MMSWiredWirelessNetworkMITMBase.server[0]"
*.evilClient.app[1].connectAddress = "MMSWiredWirelessNetworkMITMBase.server[1]"
*.evilClient.app[..1].idleInterval = intuniform(5s, 10s)
*.evilClient.app[..1].requestLength = 30B
*.evilClient.app[..1].replyLength = 15B
*.evilClient.app[..1].numRequestsPerSession = 1000

# All the clients and the server are connected to the evil client (Man in The Middle)
*.wirelessClient[*].app[..1].connectAddress = "MMSWiredWirelessNetworkMITMBase.evilClient"
*.wiredClient[*].app[..1].connectAddress = "MMSWiredWirelessNetworkMITMBase.evilClient"

# Fixed position of the clients 
*.wirelessClient[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.wirelessClient[*].mobility.initFromDisplayString = false

*.wirelessClient[0].mobility.initialZ = 0m
*.wirelessClient[1].mobility.initialZ = 0m
*.wirelessClient[0].mobility.initialX = 400m
*.wirelessClient[0].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialX = 500m

# Fixed position of the evil client
*.evilClient.mobility.initialX = 374m
*.evilClient.mobility.initialY = 57m

*.visualizer.physicalLinkVisualizer.displayLinks = true


# MMS DoS Wired (good) and Wireless (bad) clients are mixed into the network, same network 
# as the MITM attack but without the evil client
[MMS_DoS_Wired_Wireless]
network = MMSWiredWirelessNetworkDoSBase
extends = MMS_DoS_Base
*.numWiredGoodClient = 2
*.numWirelessBadClient = 3

# All the clients are connected to the server
*.wiredClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[0]"
*.wirelessClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[0]"

# Fixed position of the clients
*.wirelessClient[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.wirelessClient[*].mobility.initFromDisplayString = false

*.wirelessClient[0].mobility.initialZ = 0m
*.wirelessClient[1].mobility.initialZ = 0m
*.wirelessClient[0].mobility.initialX = 400m
*.wirelessClient[0].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialX = 500m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS DoS Wired (good) and Wireless (bad) clients are mixed into the network, same network 
# as the previous one but with multiple servers
[MMS_DoS_Wired_Wireless_Multi_Server]
network = MMSWiredWirelessNetworkDoSBase
extends = MMS_DoS_Base
# The number of app for each client and the number of servers must be equal
*.wiredClient[*].numApps = 4
*.numServers = 4


*.numWiredGoodClient = 2
*.numWirelessBadClient = 3

# All the clients are connected to each the server
*.wiredClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[0]"
*.wirelessClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[0]"
*.wiredClient[*].app[1].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[1]"
*.wirelessClient[*].app[1].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[1]"
*.wiredClient[*].app[2].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[2]"
*.wirelessClient[*].app[2].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[2]"
*.wiredClient[*].app[3].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[3]"
*.wirelessClient[*].app[3].connectAddress = "MMSWiredWirelessNetworkDoSBase.server[3]"

# Fixed position of the clients
*.wirelessClient[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.wirelessClient[*].mobility.initFromDisplayString = false

*.wirelessClient[0].mobility.initialZ = 0m
*.wirelessClient[1].mobility.initialZ = 0m
*.wirelessClient[0].mobility.initialX = 400m
*.wirelessClient[0].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialX = 500m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS MITM configuration on Wireless network, just with the wireless clients and an Access Point
[MMS_MITM_Wireless]
network = MMSWirelessNetworkMITMBase
extends = MMS_MITM_Base

check-signals = false

*.numServers = 2

#EvilComp Settings
*.evilClient.app[2].typename = "ServerEvilComp"
*.evilClient.app[..1].typename = "ClientEvilComp"
# Server service time, it has to be an integer, it is evaluated for each request
*.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)
*.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)

# Set a timeout interval a little higher than default
*.client[*].app[*].resTimeoutInterval = 3s

# Time Between TCP reconnect after a disconnect
*.evilClient.app[0].connectAddress = "MMSWirelessNetworkMITMBase.server[0]"
*.evilClient.app[1].connectAddress = "MMSWirelessNetworkMITMBase.server[1]"
*.evilClient.app[..1].idleInterval = intuniform(5s, 10s)
*.evilClient.app[..1].requestLength = 30B
*.evilClient.app[..1].replyLength = 15B
*.evilClient.app[..1].numRequestsPerSession = 1000

# All the clients and the server are connected to the evil client (Man in The Middle)
*.client[*].app[0].connectAddress = "MMSWirelessNetworkMITMBase.evilClient"
*.client[*].app[1].connectAddress = "MMSWirelessNetworkMITMBase.server[1]"

# Fixed position of the clients
*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m
*.client[3].mobility.initialX = 230m
*.client[3].mobility.initialY = 370m

# Fixed position of the evil client
*.evilClient.mobility.initialX = 200m
*.evilClient.mobility.initialY = 320m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# Statically binding client and server to the respective APs
**.clientAP.wlan[*].mgmt.ssid = "cliAP"
**.serverAP.wlan[*].mgmt.ssid = "serAP"
**.client[*].wlan[*].agent.defaultSsid = "cliAP"
**.evilClient.wlan[*].agent.defaultSsid = "cliAP"
**.server[*].wlan[*].agent.defaultSsid = "serAP"


# MMS DoS configuration on Wireless network with just the clients, the server and an Access Point
[MMS_DoS_Wireless]
network = MMSWirelessNetworkDoSBase
extends = MMS_DoS_Base

*.numGoodClient = 2
*.numBadClient = 2

# The clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWirelessNetworkDoSBase.server[0]"

# Fixed position of the clients
*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m
*.client[3].mobility.initialX = 200m
*.client[3].mobility.initialY = 320m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# Statically binding client and server to the respective APs
**.clientAP.wlan[*].mgmt.ssid = "cliAP"
**.serverAP.wlan[*].mgmt.ssid = "serAP"
**.client[*].wlan[*].agent.defaultSsid = "cliAP"
**.server[*].wlan[*].agent.defaultSsid = "serAP"

# MMS DoS configuration on Wireless network with just the clients, multiple servers and an Access Point
[MMS_DoS_Wireless_Multi_Server]
network = MMSWirelessNetworkDoSBase
extends = MMS_DoS_Base

# The number of app for each client and the number of servers must be equal
*.client[*].numApps = 2
*.numServers = 2

*.numGoodClient = 2
*.numBadClient = 30

# The server are overloaded with requests so the answer takes more time to arrive
*.client[*].app[*].resTimeoutInterval = 120s

# The clients are connected to each server
*.client[*].app[0].connectAddress = "MMSWirelessNetworkDoSBase.server[0]"
*.client[*].app[1].connectAddress = "MMSWirelessNetworkDoSBase.server[1]"

# Enable vector recording just for the main vector statistics
*.client[..1].*.vector-recording = true
**.vector-recording = false

# Fixed position of the clients
*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2..].mobility.initialX = 170m
*.client[2..].mobility.initialY = 260m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# Statically binding client and server to the respective APs
**.clientAP.wlan[*].mgmt.ssid = "cliAP"
**.serverAP.wlan[*].mgmt.ssid = "serAP"
**.client[*].wlan[*].agent.defaultSsid = "cliAP"
**.server[*].wlan[*].agent.defaultSsid = "serAP"


# MMS MITM configuration idenical to the MMS_MITM_Wireless but with Scalar Radio medium, transmission speed 
# set to 54Mbps, tranmission power set to 8mW
[MMS_MITM_Wireless_Scalar]
extends = MMS_MITM_Wireless

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 54Mbps
**.wlan*.mac.dcf.channelAccess.pendingQueue.packetCapacity = 14
**.displayCommunicationRange = true

# MMS MITM configuration identical to the MMS_MITM_Wireless_Scalar but with 6Mbps of transmission speed 
[MMS_MITM_Wireless_Scalar_6Mbps]
extends = MMS_MITM_Wireless_Scalar
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 6Mbps

# MMS MITM configuration identical to the MMS_MITM_Wireless_Scalar but with 2mW of transmission power
[MMS_MITM_Wireless_Scalar_2Mw]
extends = MMS_MITM_Wireless_Scalar
**.transmitter.power = 2mW

# MMS DoS configuration idenical to the MMS_DoS_Wireless but with Scalar Radio medium, transmission speed 
# set to 54Mbps, tranmission power set to 8mW
[MMS_DoS_Wireless_Scalar]
extends = MMS_DoS_Wireless

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan[*].bitrate = 54Mbps
**.displayCommunicationRange = true

# MMS DoS configuration idenical to the MMS_DoS_Wireless_Multi_Server but with Scalar Radio medium, transmission speed 
# set to 54Mbps, tranmission power set to 8mW
[MMS_DoS_Wireless_Scalar_Multi_Server]
extends = MMS_DoS_Wireless_Multi_Server

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan[*].bitrate = 54Mbps
**.displayCommunicationRange = true

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar but with 6Mbps of transmission speed 
[MMS_DoS_Wireless_Scalar_6Mbps]
extends = MMS_DoS_Wireless_Scalar
**.wlan[*].bitrate = 6Mbps

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar but with 2mW of transmission power
[MMS_DoS_Wireless_Scalar_2Mw]
extends = MMS_DoS_Wireless_Scalar
**.transmitter.power = 2mW

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar_Multi_Server but with 6Mbps of transmission speed 
[MMS_DoS_Wireless_Scalar_Multi_Server_6Mbps]
extends = MMS_DoS_Wireless_Scalar_Multi_Server
**.wlan[*].bitrate = 6Mbps

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar_Multi_Server but with 2mW of transmission power
[MMS_DoS_Wireless_Scalar_Multi_Server_2Mw]
extends = MMS_DoS_Wireless_Scalar_Multi_Server
**.transmitter.power = 2mW

[MMS_DoS_Lan_Multi_Server_Base]
network = MMSNetworkDosLanBase
extends = MMS_DoS_Base
# The number of app for each client and the number of servers must be equal
**.client[*].numApps = 4
**.numServers = 4

# Client Settings (define which clients are good ones and which are bad ones 
# with the respective service time distributions)
**.goodCliLan.client[*].app[*].typename = "MmsClient"
**.goodCliLan.client[*].app[*].thinkTime = intuniform(5s, 8s)
**.badCliLan.client[*].app[*].typename = "BadMmsClient"
**.badCliLan.client[*].app[*].thinkTime = intuniform(47ms, 52ms)

# Time Between TCP reconnect after a disconnect
**.client[*].app[*].idleInterval = intuniform(5s, 10s)
**.client[*].app[*].requestLength = 30B
**.client[*].app[*].replyLength = 15B
**.client[*].app[*].numRequestsPerSession = 10000

# Configure the first lan
**.goodCliLan.numGoodClient = 1
**.goodCliLan.numBadClient = 0

# Configure the second lan
**.badCliLan.numBadClient = 3
**.badCliLan.numGoodClient = 0

# All the clients are connected to the server
**.client[*].app[0].connectAddress = "MMSNetworkDosLanBase.derLan.server[0]"
**.client[*].app[1].connectAddress = "MMSNetworkDosLanBase.derLan.server[1]"
**.client[*].app[2].connectAddress = "MMSNetworkDosLanBase.derLan.server[2]"
**.client[*].app[3].connectAddress = "MMSNetworkDosLanBase.derLan.server[3]"

[MMS_DoS_Wired_Lan_Multi_Server]
extends = MMS_DoS_Lan_Multi_Server_Base

MMSNetworkDosLanBase.goodCliLan.typename = "WiredCliLan"
MMSNetworkDosLanBase.badCliLan.typename = "WiredCliLan"

[MMS_DoS_Wireless_Lan_Multi_Server]
extends = MMS_DoS_Lan_Multi_Server_Base

MMSNetworkDosLanBase.goodCliLan.typename = "WirelessCliLan"
MMSNetworkDosLanBase.badCliLan.typename = "WirelessCliLan"

**.goodCliLan.accessPoint.wlan[*].mgmt.ssid = "goodCli"
**.badCliLan.accessPoint.wlan[*].mgmt.ssid = "badCli"

**.goodCliLan.client[*].wlan[*].agent.defaultSsid = "goodCli"
**.badCliLan.client[*].wlan[*].agent.defaultSsid = "badCli"

[MMS_MITM_Wireless_Lan_Multi_Server]
network = MMSNetworkMITMLanBase
extends = MMS_MITM_Base

MMSNetworkMITMLanBase.goodCliLan.typename = "WirelessCliMITMLan"
MMSNetworkMITMLanBase.derLan[*].typename = "WiredDerLan"

# Configure the first lan
**.goodCliLan.numGoodClient = 1

# Configure the der lans
**.numDerLan = 2
**.derLan[*].numServers = 1

# The number of app for each client and the number of servers must be equal
**.goodCliLan.client[*].numApps = 2
**.goodCliLan.evilClient.numApps = 2 + 1

#EvilComp Settings
**.goodCliLan.evilClient.app[2].typename = "ServerEvilComp"
**.goodCliLan.evilClient.app[..1].typename = "ClientEvilComp"
# Server service time, it has to be an integer, it is evaluated for each request
**.goodCliLan.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)
**.goodCliLan.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)
# Time Between TCP reconnect after a disconnect
**.goodCliLan.evilClient.app[..1].idleInterval = intuniform(5s, 10s)
# Connection addresses for the evilClient
**.goodCliLan.evilClient.app[0].connectAddress = "MMSNetworkMITMLanBase.derLan[0].server[0]"
**.goodCliLan.evilClient.app[1].connectAddress = "MMSNetworkMITMLanBase.derLan[1].server[0]"

# We suppose that the connection with the first server is compromised and the connection 
# with the second server isn't"
**.goodCliLan.client[*].app[0].connectAddress = "MMSNetworkMITMLanBase.goodCliLan.evilClient"
**.goodCliLan.client[*].app[1].connectAddress = "MMSNetworkMITMLanBase.derLan[1].server[0]"

# Access point configuration just necessary if there is more than 1 wireless LAN 
**.goodCliLan.accessPoint.wlan[*].mgmt.ssid = "goodCli"
**.goodCliLan.client[*].wlan[*].agent.defaultSsid = "goodCli"
**.goodCliLan.evilClient.wlan[*].agent.defaultSsid = "goodCli"

[MMS_MITM_Wireless_5G_Lan_Multi_Server]
network = MMS5GNetworkMITMLanBase
extends = MMS_MITM_Base

MMS5GNetworkMITMLanBase.goodCliLan.typename = "WirelessCliMITMLan"
MMS5GNetworkMITMLanBase.derLan[*].typename = "Wireless5GDerLan"

# Configure the first lan
**.goodCliLan.numGoodClient = 1

# connect the NRUE's NIC to the corresponding serving gNB
**.server[*].macCellId = 1
**.server[*].masterId = 1
**.server[*].nrMacCellId = 1
**.server[*].nrMasterId = 1


# Configure the der lans
**.numDerLan = 1
**.derLan[*].numServers = 1

# The number of app for each client and the number of servers must be equal
**.goodCliLan.client[*].numApps = 1
**.goodCliLan.evilClient.numApps = 1 + 1

#EvilComp Settings
**.goodCliLan.evilClient.app[1].typename = "ServerEvilComp"
**.goodCliLan.evilClient.app[0].typename = "ClientEvilComp"
# Server service time, it has to be an integer, it is evaluated for each request
**.goodCliLan.evilClient.app[1].replyDelay = intuniform(0ms, 5ms)
**.goodCliLan.evilClient.app[0].thinkTime = intuniform(5ms, 8ms)
# Time Between TCP reconnect after a disconnect
**.goodCliLan.evilClient.app[0].idleInterval = intuniform(5s, 10s)
# Connection addresses for the evilClient
**.goodCliLan.evilClient.app[0].connectAddress = "MMS5GNetworkMITMLanBase.derLan[0].server[0]"
#**.goodCliLan.evilClient.app[1].connectAddress = "MMS5GNetworkMITMLanBase.derLan[1].server[0]"

# We suppose that the connection with the first server is compromised and the connection 
# with the second server isn't"
**.goodCliLan.client[*].app[0].connectAddress = "MMS5GNetworkMITMLanBase.goodCliLan.evilClient"
#**.goodCliLan.client[*].app[1].connectAddress = "MMS5GNetworkMITMLanBase.derLan[1].server[0]"

# Access point configuration just necessary if there is more than 1 wireless LAN 
**.goodCliLan.accessPoint.wlan[*].mgmt.ssid = "goodCli"
**.goodCliLan.client[*].wlan[*].agent.defaultSsid = "goodCli"
**.goodCliLan.evilClient.wlan[*].agent.defaultSsid = "goodCli"

[MMS_MITM_Wired_Lan_Multi_Server]
network = MMSNetworkMITMLanBase
extends = MMS_MITM_Base

MMSNetworkMITMLanBase.goodCliLan.typename = "WiredCliMITMLan"
MMSNetworkMITMLanBase.derLan[*].typename = "WiredDerLan"

# Configure the first lan
**.goodCliLan.numGoodClient = 1

# Configure the der lans
**.numDerLan = 2
**.derLan[*].numServers = 1

# The number of app for each client and the number of servers must be equal
**.goodCliLan.client[*].numApps = 2
**.goodCliLan.evilClient.numApps = 2 + 1

#EvilComp Settings
**.goodCliLan.evilClient.app[2].typename = "ServerEvilComp"
**.goodCliLan.evilClient.app[..1].typename = "ClientEvilComp"
# Server service time, it has to be an integer, it is evaluated for each request
**.goodCliLan.evilClient.app[2].replyDelay = intuniform(0ms, 5ms)
**.goodCliLan.evilClient.app[..1].thinkTime = intuniform(5ms, 8ms)
# Time Between TCP reconnect after a disconnect
**.goodCliLan.evilClient.app[..1].idleInterval = intuniform(5s, 10s)
# Connection addresses for the evilClient
**.goodCliLan.evilClient.app[0].connectAddress = "MMSNetworkMITMLanBase.derLan[0].server[0]"
**.goodCliLan.evilClient.app[1].connectAddress = "MMSNetworkMITMLanBase.derLan[1].server[0]"

# We suppose that the connection with the first server is compromised and the connection 
# with the second server isn't
**.goodCliLan.client[*].app[0].connectAddress = "MMSNetworkMITMLanBase.goodCliLan.evilClient"
**.goodCliLan.client[*].app[1].connectAddress = "MMSNetworkMITMLanBase.derLan[1].server[0]"

[MMS_DoS_Wireless_Scalar_Moving_2Mw]
extends = MMS_DoS_Base
network = MMSWirelessNetworkDoSHandoverBase

*.numGoodClient = 2
*.numBadClient = 3

# The clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWirelessNetworkDoSHandoverBase.server"

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 2mW
*.client[*].wlan[*].radio.transmitter.power = 4mW

*.client[*].mobility.typename = "LinearMobility"
*.client[*].mobility.speed = 120mps
*.client[*].mobility.initialMovementHeading = 0deg
*.client[*].mobility.updateInterval = 100ms
*.client[*].mobility.constraintAreaMinX = 40m
*.client[*].mobility.constraintAreaMaxX = 600m

# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 100m
*.client[0].mobility.initialY = 225m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m
*.client[3].mobility.initialX = 230m
*.client[3].mobility.initialY = 225m

*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
**.wlan[*].radio.displayCommunicationRange = true
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
