# General configurations extended by default by every other configuration
[General]
sim-time-limit = 120s
*.numClients = 4
#General number of apps for every type of node (leave to 1)
*.client[*].numApps = 1
*.wiredClient[*].numApps = 1
*.wirelessClient[*].numApps = 1
*.broker.numApps = 1
*.server.numApps = 1
*.evilClient.numApps = 1

#Clients Transport Settings
*.client[*].hasTcp = true
*.client[*].hasUdp = false

# Wired Clients Transport Settings
*.wiredClient[*].hasTcp = true
*.wiredClient[*].hasUdp = false

#Wireless Clients Transport Settings
*.wirelessClient[*].hasTcp = true
*.wirelessClient[*].hasUdp = false

#Server Transport Settings
*.server.hasTcp = true
*.server.hasUdp = false
*.evilClient.hasTcp = true
*.evilClient.hasUdp = false
*.broker.hasTcp = true
*.broker.hasUdp = false

num-rngs = 20
repeat = 20
seed-set = ${repetition}

# MQTT base configuration extended by every other MQTT configuration
[MQTTBase]
# Number of clients for the MQTT simulation
*.numClients = 3
#Broker Settings
*.broker.app[0].typename = "Broker"
# Broker's service time distribution
*.broker.app[0].serviceTime = intuniform(4ms, 8ms)
**.isDos = true
*.broker.app[0].replyDelay = 0ms

## Clients Settings ##
# Type of client (class wich defines the client's behaviour)
*.client[*].app[0].typename = "MqttClient"
# Clients' service time distribution
*.client[*].app[0].thinkTime = intuniform(47ms, 52ms)
# Client's time gap between sessions (different TCP connections)
*.client[*].app[0].idleInterval = 100s
# Length of the request
*.client[*].app[0].requestLength = 30B
# Length of the reply
*.client[*].app[0].replyLength = 15B
# Maximum number of requests to send for each session 
*.client[*].app[0].numRequestsPerSession = 1000 

## Client CFG ##
# Publisher on topic 1 (command)
*.client[0].app[0].pubTopic = 1
# Subscriber on topic 0 (report)
*.client[0].app[0].subTopic = 0

# Publisher on topic 0 (report)
*.client[1].app[0].pubTopic = 0
# Subscriber on topic 1 (command)
*.client[1].app[0].subTopic = 1

# Publisher on topic 0 (report)
*.client[2].app[0].pubTopic = 0
# Publisher on topic 1 (command)
*.client[2].app[0].subTopic = 1

# MQTT DoS wired configuration on Ethernet cables where all the clients are connected to a 
# switch wich is connected to the rouer, connected itself to the server 
[MQTTWired]
extends = MQTTBase
network = MqttWiredNetworkBase
# Specify that each client must connect to the broker
*.client[*].app[0].connectAddress = "MqttWiredNetworkBase.broker"
# Statically set the position for each client (not necessary here)
*.client[*].mobility.typename = "StationaryMobility"
*.client[*].mobility.initFromDisplayString = false
*.client[*].mobility.initialY = 350m
*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 90m
*.client[1].mobility.initialX = 150m
*.client[2].mobility.initialX = 210m

# MQTT DoS wireless configuration where clients and server communicate using 
# an Access Point through a WiFi connection
[MQTTWireless]
extends = MQTTBase
network = MqttWirelessNetworkBase
# Specify that each client must connect to the broker
*.client[*].app[0].connectAddress = "MqttWirelessNetworkBase.broker"
# Statically set the position for each client (necessary for the wireless travel time calculations)
*.client[*].mobility.typename = "StationaryMobility"
*.client[*].mobility.initFromDisplayString = false
*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 150m
*.client[1].mobility.initialY = 200m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 200m
*.client[2].mobility.initialY = 250m

*.visualizer.mediumVisualizer.displaySignals = true

# MMS Man In The Middle Base configuration extended by every other MMS MIMT configuration
[MMS_MIMT_Base]
## Server Settings ##
*.server.app[0].typename = "ServerAsClient"
# Time distribution Between MMS messages, this is evaluated for each request
*.server.app[0].thinkTime = intuniform(45ms, 70ms)
# Time distribution Between TCP reconnect after a disconnect
*.server.app[0].idleInterval = intuniform(5s, 10s)
# Server's request length
*.server.app[0].requestLength = 30B
# Server's reply length
*.server.app[0].replyLength = 15B
# Maximum number of requests done by the server (it's working as a client in this configuration)
*.server.app[0].numRequestsPerSession = 2000
# Server service time, it has to be an integer, it is evaluated for each request
*.server.app[0].replyDelay = intuniform(0ms, 5ms)

# Client Settings
*.client[*].app[0].typename = "MmsClient"
# Time Between MMS requests, this is evaluated for each request
*.client[*].app[0].thinkTime = intuniform(45ms, 70ms)
# Time Between TCP reconnect after a disconnect
*.client[*].app[0].idleInterval = intuniform(5s, 10s)
*.client[*].app[0].requestLength = 30B
*.client[*].app[0].replyLength = 15B
*.client[*].app[0].numRequestsPerSession = 2000

# WiredClient Settings
*.wiredClient[*].app[0].typename = "MmsClient"
*.wiredClient[*].app[0].thinkTime = intuniform(45ms, 70ms)
*.wiredClient[*].app[0].idleInterval = intuniform(5s, 10s)
*.wiredClient[*].app[0].requestLength = 30B
*.wiredClient[*].app[0].replyLength = 15B
*.wiredClient[*].app[0].numRequestsPerSession = 2000

# WirelessClient Settings
*.wirelessClient[*].app[0].typename = "MmsClient"
*.wirelessClient[*].app[0].thinkTime = intuniform(45ms, 70ms)
*.wirelessClient[*].app[0].idleInterval = intuniform(5s, 10s)
*.wirelessClient[*].app[0].requestLength = 30B
*.wirelessClient[*].app[0].replyLength = 15B
*.wirelessClient[*].app[0].numRequestsPerSession = 2000


#EvilServer Settings
*.evilClient.app[0].typename = "EvilServer"
# Server service time, it has to be an integer, it is evaluated for each request
*.evilClient.app[0].replyDelay = intuniform(0ms, 5ms)

*.evilClient.mobility.typename = "StationaryMobility"
*.evilClient.mobility.initFromDisplayString = false

# MMS DoS Base configuration extended by every other MMS DoS configuration
[MMS_DoS_Base]
# Server Settings
*.server.app[0].typename = "MmsServer"

# Client Settings (define which clients are good ones and which are bad ones 
# with the respective service time distributions)
*.client[..1].app[0].typename = "MmsClient"
*.client[..1].app[0].thinkTime = intuniform(5ms, 8ms)
*.client[2..].app[0].typename = "BadMmsClient"
*.client[2..].app[0].thinkTime = intuniform(47ms, 52ms)

# Time Between TCP reconnect after a disconnect
*.client[*].app[0].idleInterval = intuniform(5s, 10s)
*.client[*].app[0].requestLength = 30B
*.client[*].app[0].replyLength = 15B
*.client[*].app[0].numRequestsPerSession = 10000

# If the network has mixed wired and wireless clients, in a DoS configuration the wired clients 
# are the good ones and the wireless clients are the bad ones
# WiredClient Settings (good)
*.wiredClient[*].app[0].typename = "MmsClient"
*.wiredClient[*].app[0].thinkTime = intuniform(5ms, 8ms)
*.wiredClient[*].app[0].idleInterval = intuniform(5s, 10s)
*.wiredClient[*].app[0].requestLength = 30B
*.wiredClient[*].app[0].replyLength = 15B
*.wiredClient[*].app[0].numRequestsPerSession = 10000

# WirelessClient Settings (bad)
*.wirelessClient[*].app[0].typename = "BadMmsClient"
*.wirelessClient[*].app[0].thinkTime = intuniform(47ms, 52ms)
*.wirelessClient[*].app[0].idleInterval = intuniform(5s, 10s)
*.wirelessClient[*].app[0].requestLength = 30B
*.wirelessClient[*].app[0].replyLength = 15B
*.wirelessClient[*].app[0].numRequestsPerSession = 10000
 
# MMS MIMT Wired configuration with 4 clients connected to a switch, the server and the evil client are
# connected to a router and switch and router are connetcted themselves
[MMS_MIMT_Wired]
network = MMSWiredNetworkMIMTBase
extends = MMS_MIMT_Base

MMSWiredNetworkMIMTBase.numClients = 4

# All the clients and the server are connected to the evil client (Man in The Middle)
*.server.app[0].connectAddress = "MMSWiredNetworkMIMTBase.evilClient"
*.client[*].app[0].connectAddress = "MMSWiredNetworkMIMTBase.evilClient"

# Fixed position of the evil client
*.evilClient.mobility.initialX = 350m
*.evilClient.mobility.initialY = 128m

# MMS DoS Wired configuration with 3 good clients and 3 bad clients connected to a switch, the server is
# connected to a router and switch and router are connetcted themselves
[MMS_DoS_Wired]
network = MMSWiredNetworkDoSBase
extends = MMS_DoS_Base

MMSWiredNetworkDoSBase.numGoodClient = 3
MMSWiredNetworkDoSBase.numBadClient = 3

# All the clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWiredNetworkDoSBase.server"

# MMS MIMT Wired and Wireless clients are mixed in the network, the Access point 
# is connected to the router as the server and the evil client 
[MMS_MIMT_Wired_Wireless]
network = MMSWiredWirelessNetworkMIMTBase
extends = MMS_MIMT_Base
*.numWiredClients = 2
*.numWirelessClients = 2

# Server and clients are connected to the evil client (Man In The Middle)
*.server.app[0].connectAddress = "MMSWiredWirelessNetworkMIMTBase.evilClient"
*.wiredClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkMIMTBase.evilClient"
*.wirelessClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkMIMTBase.evilClient"

# Fixed position of the clients 
*.wirelessClient[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.wirelessClient[*].mobility.initFromDisplayString = false

*.wirelessClient[0].mobility.initialZ = 0m
*.wirelessClient[1].mobility.initialZ = 0m
*.wirelessClient[0].mobility.initialX = 400m
*.wirelessClient[0].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialX = 500m

# Fixed position of the evil client
*.evilClient.mobility.initialX = 374m
*.evilClient.mobility.initialY = 57m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS DoS Wired (good) and Wireless (bad) clients are mixed into the network, same network 
# as the MIMT attack but without the evil client
[MMS_DoS_Wired_Wireless]
network = MMSWiredWirelessNetworkDoSBase
extends = MMS_DoS_Base
*.numWiredGoodClient = 2
*.numWirelessBadClient = 2

# All the clients are connected to the server
*.wiredClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server"
*.wirelessClient[*].app[0].connectAddress = "MMSWiredWirelessNetworkDoSBase.server"

# Fixed position of the clients
*.wirelessClient[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.wirelessClient[*].mobility.initFromDisplayString = false

*.wirelessClient[0].mobility.initialZ = 0m
*.wirelessClient[1].mobility.initialZ = 0m
*.wirelessClient[0].mobility.initialX = 400m
*.wirelessClient[0].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialY = 358m
*.wirelessClient[1].mobility.initialX = 500m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS MIMT configuration on Wireless network, just with the wireless clients and an Access Point
[MMS_MIMT_Wireless]
network = MMSWirelessNetworkMIMTBase
extends = MMS_MIMT_Base

# Server and clients are connected to the EvilClient
*.server.app[0].connectAddress = "MMSWirelessNetworkMIMTBase.evilClient"
*.client[*].app[0].connectAddress = "MMSWirelessNetworkMIMTBase.evilClient"

# Fixed position of the clients
*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m
*.client[3].mobility.initialX = 230m
*.client[3].mobility.initialY = 370m

# Fixed position of the evil client
*.evilClient.mobility.initialX = 200m
*.evilClient.mobility.initialY = 320m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS DoS configuration on Wireless network with just the clients, the server and an Access Point
[MMS_DoS_Wireless]
network = MMSWirelessNetworkDoSBase
extends = MMS_DoS_Base

*.numGoodClient = 2
*.numBadClient = 2

# The clients are connected to the server
*.client[*].app[0].connectAddress = "MMSWirelessNetworkDoSBase.server"

# Fixed position of the clients
*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m
*.client[3].mobility.initialX = 200m
*.client[3].mobility.initialY = 320m

*.visualizer.physicalLinkVisualizer.displayLinks = true

# MMS MIMT configuration idenical to the MMS_MIMT_Wireless but with Scalar Radio medium, transmission speed 
# set to 54Mbps, tranmission power set to 8mW
[MMS_MIMT_Wireless_Scalar]
extends = MMS_MIMT_Wireless

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 54Mbps
**.wlan*.mac.dcf.channelAccess.pendingQueue.packetCapacity = 14
**.displayCommunicationRange = true

# MMS MIMT configuration identical to the MMS_MIMT_Wireless_Scalar but with 6Mbps of transmission speed 
[MMS_MIMT_Wireless_Scalar_6Mbps]
extends = MMS_MIMT_Wireless_Scalar
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 6Mbps

# MMS MIMT configuration identical to the MMS_MIMT_Wireless_Scalar but with 2mW of transmission power
[MMS_MIMT_Wireless_Scalar_2Mw]
extends = MMS_MIMT_Wireless_Scalar
**.transmitter.power = 2mW

# MMS DoS configuration idenical to the MMS_DoS_Wireless but with Scalar Radio medium, transmission speed 
# set to 54Mbps, tranmission power set to 8mW
[MMS_DoS_Wireless_Scalar]
extends = MMS_DoS_Wireless

# Setup radio medium and transmitter model
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
# Setup transmission power
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 54Mbps
**.wlan*.mac.dcf.channelAccess.pendingQueue.packetCapacity = 14
**.displayCommunicationRange = true

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar but with 6Mbps of transmission speed 
[MMS_DoS_Wireless_Scalar_6Mbps]
extends = MMS_DoS_Wireless_Scalar
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 6Mbps

# MMS DoS configuration identical to the MMS_DoS_Wireless_Scalar but with 2mW of transmission power
[MMS_DoS_Wireless_Scalar_2Mw]
extends = MMS_DoS_Wireless_Scalar
**.transmitter.power = 2mW


