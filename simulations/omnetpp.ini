[General]
sim-time-limit = 120s
*.numClients = 3
#General
*.client[*].numApps = 1
*.broker.numApps = 1
*.server.numApps = 1
*.evilClient.numApps = 1

#Clients Settings
*.client[*].hasTcp = true
*.client[*].hasUdp = false

#Server Settings
*.server.hasTcp = true
*.server.hasUdp = false
*.evilClient.hasTcp = true
*.evilClient.hasUdp = false

num-rngs = 20
repeat = 20
seed-set = ${repetition}

[MQTTBase]
#Broker Settings
*.broker.numApps = 1
*.broker.app[0].typename = "Broker"
*.broker.app[0].serviceTime = intuniform(4ms, 8ms)
**.isDos = true
*.broker.hasTcp = true
*.broker.hasUdp = false
*.broker.app[0].replyDelay = 0ms

#Clients Settings
*.client[*].numApps = 1
*.client[..2].app[0].typename = "MqttClient"
*.client[*].app[0].thinkTime = intuniform(47ms, 52ms)
*.client[*].app[0].idleInterval = 100s
*.client[*].app[0].requestLength = 30B
*.client[*].app[0].replyLength = 15B
*.client[*].app[0].numRequestsPerSession = 1000 
*.client[*].hasTcp = true
*.client[*].hasUdp = false


# Client CFG
*.client[0].app[0].pubTopic = 1
*.client[0].app[0].subTopic = 0

*.client[1].app[0].pubTopic = 0
*.client[1].app[0].subTopic = 1

*.client[2].app[0].pubTopic = 0
*.client[2].app[0].subTopic = 1

[MQTTWired]
extends = MQTTBase
network = MqttWiredNetworkBase
*.client[*].app[0].connectAddress = "MqttWiredNetworkBase.broker"
*.client[*].mobility.typename = "StationaryMobility"
*.client[*].mobility.initFromDisplayString = false
*.client[*].mobility.initialY = 350m
*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 90m
*.client[1].mobility.initialX = 150m
*.client[2].mobility.initialX = 210m


[MQTTWireless]
extends = MQTTBase
network = MqttWirelessNetworkBase
*.client[*].app[0].connectAddress = "MqttWirelessNetworkBase.broker"
*.client[*].mobility.typename = "StationaryMobility"
*.client[*].mobility.initFromDisplayString = false
*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 150m
*.client[1].mobility.initialY = 200m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 200m
*.client[2].mobility.initialY = 250m

*.visualizer.mediumVisualizer.displaySignals = true


[MMSBase]
#Server Settings
*.server.app[0].typename = "ServerAsClient"
*.server.app[0].thinkTime = intuniform(45ms, 70ms) #[Time Between MMS requests, this is evaluated for each request]
*.server.app[0].idleInterval = intuniform(5s, 10s) #[Time Between TCP reconnect after a disconnect]
*.server.app[0].requestLength = 30B
*.server.app[0].replyLength = 15B
*.server.app[0].numRequestsPerSession = 2000
*.server.app[0].replyDelay = intuniform(0ms, 5ms) #[Server service time, it has to be an integer, it is evaluated for each request]

#Client Settings
*.client[*].app[0].typename = "MmsClient"
*.client[*].app[0].thinkTime = intuniform(45ms, 70ms) #[Time Between MMS requests, this is evaluated for each request]
*.client[*].app[0].idleInterval = intuniform(5s, 10s) #[Time Between TCP reconnect after a disconnect]
*.client[*].app[0].requestLength = 30B
*.client[*].app[0].replyLength = 15B
*.client[*].app[0].numRequestsPerSession = 2000


#EvilServer Settings
*.evilClient.app[0].typename = "EvilServer"
*.evilClient.app[0].replyDelay = intuniform(0ms, 5ms) #[Server service time, it has to be an integer, it is evaluated for each request]

*.evilClient.mobility.typename = "StationaryMobility"
*.evilClient.mobility.initFromDisplayString = false
 
[MMSWired]
network = MMSWiredNetworkBase
extends = MMSBase

MMSWiredNetworkBase.numClients = 4

*.server.app[0].connectAddress = "MMSWiredNetworkBase.evilClient"
*.client[*].app[0].connectAddress = "MMSWiredNetworkBase.evilClient"

*.evilClient.mobility.initialX = 350m
*.evilClient.mobility.initialY = 128m

[MMSWireless]
network = MMSWirelessNetworkBase
extends = MMSBase

*.server.app[0].connectAddress = "MMSWirelessNetworkBase.evilClient"
*.client[*].app[0].connectAddress = "MMSWirelessNetworkBase.evilClient"

*.client[*].mobility.typename = "StationaryMobility"
# Set to false if you want to use stationary mobility
*.client[*].mobility.initFromDisplayString = false

*.client[*].mobility.initialZ = 0m
*.client[0].mobility.initialX = 200m
*.client[0].mobility.initialY = 130m
*.client[1].mobility.initialY = 190m
*.client[1].mobility.initialX = 170m
*.client[2].mobility.initialX = 170m
*.client[2].mobility.initialY = 260m

*.evilClient.mobility.initialX = 200m
*.evilClient.mobility.initialY = 320m

*.visualizer.physicalLinkVisualizer.displayLinks = true


[MMSWirelessScalar]
extends = MMSWireless

*.radioMedium.typename = "Ieee80211ScalarRadioMedium"
**.wlan[*].radio.typename = "Ieee80211ScalarRadio"
**.transmitter.power = 8mW
# The possible speeds are 6, 9, 12, 18, 24, 36, 48 and 54 Mbps
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 54Mbps
**.wlan*.mac.dcf.channelAccess.pendingQueue.packetCapacity = 14
**.displayCommunicationRange = true

[MMSWirelessScalar6Mbps]
extends = MMSWirelessScalar
**.wlan*.mac.*.rateSelection.dataFrameBitrate = 6Mbps

[MMSWirelessScalar2Mw]
extends = MMSWirelessScalar
# TODO See if there is a statistic to see the retransmissions
**.transmitter.power = 2mW

# TODO Solve the cast problem
[MMSWirelessDimensional]
# Usefull to model interference of signal with complex spectra
extends = MMSWireless
*.radioMedium.typename = "Ieee80211DimensionalRadioMedium"
**.wlan[*].radio.typename = "Ieee80211DimensionalRadio"
**.wlan[*].radio.signalAnalogRepresentation = "dimensional"
**.wlan[*].radio.transmitter.frequencyGains = "left c-b*1.5 -40dB linear c-b -28dB linear c-b*0.5-1MHz -20dB linear c-b*0.5+1MHz 0dB linear c+b*0.5-1MHz 0dB linear c+b*0.5+1MHz -20dB linear c+b -28dB linear c+b*1.5 -40dB right"

**.displayCommunicationRange = true


